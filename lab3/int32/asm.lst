     1                                  section .rodata
     2 00000000 2523640A00                  format db "%#d", 10, 0
     3                                  
     4                                  section .data
     5                                  	default rel
     6                                  	extern scanf, printf, exit
     7 00000000 0000                    	a dw 0
     8 00000002 0000                    	b dw 0
     9 00000004 0000                    	res dw 0
    10                                  
    11 00000006 496E7075742076616C-     	msg_1     db        'Input values:', 0xa, 0
    11 0000000F 7565733A0A00       
    12                                  	len_1     equ       $ - msg_1
    13                                  
    14 00000015 61203D2000              	msg_a     db        'a = ', 0
    15                                  	len_a     equ       $ - msg_a
    16                                  
    17 0000001A 62203D2000              	msg_b     db        'b = ', 0
    18                                  	len_b     equ       $ - msg_b
    19                                  
    20 0000001F 726573756C74203D20-     	msg_res   db        'result = ', 0
    20 00000028 00                 
    21                                  	len_res   equ       $ - msg_res
    22                                  
    23 00000029 07                      	len_inp   db        7
    24 0000002A 00<rep Ch>              	buffer    times     12 db 0
    25                                  
    26 00000036 00                      	len_cur   db        0
    27 00000037 00                      	sign      db        0
    28                                  
    29 00000038 4572726F7200            	msg_err   db        'Error', 0
    30                                  	len_err   equ       $ - msg_err
    31                                  
    32                                  
    33                                  section .text
    34                                  	global _start
    35                                  
    36                                  ;    |___INPUT___|  
    37                                  ;    ||         ||
    38                                  ;    ||         ||
    39                                  ;   \  /       \  /
    40                                  ;    \/         \/
    41                                  _start:
    42 00000000 4831C0                  	xor       rax,      rax     ;  \\\///
    43 00000003 4831DB                  	xor       rbx,      rbx     ;   \\//
    44 00000006 4831C9                  	xor       rcx,      rcx     ;    \/
    45 00000009 4831D2                  	xor       rdx,      rdx     ; cleaning
    46                                  
    47                                  	; "Input values"
    48 0000000C BA0F000000              	mov       edx,      len_1   ;
    49 00000011 B9[06000000]            	mov       ecx,      msg_1   ;
    50 00000016 E841010000              	call      write
    51                                  
    52                                  	; a = _
    53 0000001B BA05000000              	mov       edx,      len_a
    54 00000020 B9[15000000]            	mov       ecx,      msg_a
    55 00000025 E832010000              	call      write
    56                                  
    57                                  	; reading a
    58 0000002A E83A010000              	call      read
    59 0000002F E8C4010000              	call      @to_int
    60 00000034 BA00800000              	mov       edx,      32768
    61 00000039 39D0                    	cmp       eax,      edx
    62 0000003B 0F8D0D020000            	jge       @error
    63 00000041 BA0080FFFF              	mov       edx,      -32768
    64 00000046 39D0                    	cmp       eax,      edx
    65 00000048 0F8E00020000            	jle       @error
    66 0000004E 8905(00000000)          	mov    dword [a],      eax
    67 00000054 E8E2000000              	call @buffer_cleaning
    68                                  
    69                                  	; b = _
    70 00000059 BA05000000              	mov       edx,      len_b
    71 0000005E B9[1A000000]            	mov       ecx,      msg_b
    72 00000063 E8F4000000              	call      write
    73                                  
    74                                  	; reading b
    75 00000068 BA[29000000]            	mov       edx,      len_inp
    76 0000006D B9[2A000000]            	mov       ecx,      buffer
    77 00000072 E8F2000000              	call      read
    78 00000077 E87C010000              	call      @to_int
    79 0000007C BA00800000              	mov       edx,      32768
    80 00000081 39D0                    	cmp       eax,      edx
    81 00000083 0F8DC5010000            	jge       @error
    82 00000089 BA0080FFFF              	mov       edx,      -32768
    83 0000008E 39D0                    	cmp       eax,      edx
    84 00000090 0F8EB8010000            	jle       @error
    85 00000096 BA00000000              	mov       edx,      0
    86 0000009B 39D0                    	cmp       eax,      edx
    87 0000009D 0F84AB010000            	je        @error
    88 000000A3 8905(02000000)          	mov    dword [b],      eax
    89 000000A9 E88D000000              	call @buffer_cleaning
    90                                  
    91                                  
    92                                  ; calculations
    93                                  int_asm_func:
    94 000000AE 4831C0                  	xor    rax,    rax 
    95 000000B1 4831DB                  	xor    rbx,    rbx 
    96 000000B4 4831C9                  	xor    rcx,    rcx 
    97 000000B7 4831D2                  	xor    rdx,    rdx 
    98                                  
    99 000000BA 8B05(00000000)          	mov    eax,     [a]    ; eax = a
   100 000000C0 8B1D(02000000)          	mov    ebx,     [b]    ; ebx = b
   101 000000C6 39D8                    	cmp    eax,     ebx    ; eax==ebx?
   102 000000C8 7404                    	je     @a_is_b_int
   103 000000CA 7C0F                    	jl     @a_lower_than_b_int
   104 000000CC 7F19                    	jg     @a_higher_than_b_int
   105                                  
   106                                  	@a_is_b_int:
   107 000000CE B80B000000              	mov    rax,    11     ; eax = 11
   108 000000D3 8905(04000000)          	mov    [res],  eax    ; wres = 11
   109 000000D9 EB1D                    	jmp    @res
   110                                  
   111                                  	@a_lower_than_b_int:
   112 000000DB F7E8                    	imul   eax            ; edx:eax = a*a
   113 000000DD F7FB                    	idiv   ebx            ; eax = a*a/b
   114 000000DF 8905(04000000)          	mov    [res], eax     ;
   115 000000E5 EB11                    	jmp    @res
   116                                  
   117                                  	@a_higher_than_b_int:
   118 000000E7 F7EB                    	imul   ebx           ; eax:edx = a*b
   119 000000E9 B90B000000              	mov    ecx,    11    ; ecx = 11
   120 000000EE F7F9                    	idiv   ecx           ; eax:edx / eax
   121 000000F0 8905(04000000)          	mov    dword [res], eax    ; res = eax
   122 000000F6 EB00                    	jmp    @res
   123                                  
   124                                  @res:
   125                                  	; result = _
   126 000000F8 BA0A000000              	mov       edx,      len_res
   127 000000FD B9[1F000000]            	mov       ecx,      msg_res
   128 00000102 E855000000              	call      write
   129                                  
   130 00000107 E886000000              	call @to_str ; res -> str
   131                                  
   132 0000010C 48BE-                   	mov rsi, buffer
   132 0000010E [2A00000000000000] 
   133 00000116 8A15(36000000)          	mov dl, byte [len_cur]
   134 0000011C E80D000000              	call @new_write
   135                                  
   136 00000121 BB00000000              	mov ebx, 0
   137 00000126 B83C000000              	mov rax, 60
   138 0000012B 0F05                    	syscall
   139 0000012D C3                      ret
   140                                  
   141                                  ;    |_FUNCTIONS_|  
   142                                  ;    ||         ||
   143                                  ;    ||         ||
   144                                  ;   \  /       \  /
   145                                  ;    \/         \/
   146                                  @new_write:
   147 0000012E B801000000              	mov rax, 1
   148 00000133 BF01000000              	mov rdi, 1
   149 00000138 0F05                    	syscall
   150 0000013A C3                      ret
   151                                  
   152                                  @buffer_cleaning:
   153 0000013B 31C9                    	xor ecx, ecx
   154 0000013D 8A0D(36000000)          	mov cl, byte [len_cur]
   155 00000143 B800000000              	mov eax, 0
   156                                  	clear:
   157 00000148 67C680[2A000000]00      	mov byte [buffer + eax], ''
   158 00000150 FFC0                    	inc eax
   159 00000152 E2F4                    	loop clear
   160 00000154 C605(36000000)00        	mov byte [len_cur], 0
   161 0000015B C3                      ret
   162                                  
   163                                  write:
   164 0000015C BB01000000              	mov       ebx,      1
   165 00000161 B804000000              	mov       eax,      4
   166 00000166 CD80                    	int 80h
   167 00000168 C3                      ret
   168                                  
   169                                  read:
   170                                  ;	mov       ebx,      1
   171                                  ;	mov       eax,      3
   172                                  ;	int 80h
   173                                  ;ret
   174 00000169 BA[29000000]            	mov       edx,      len_inp
   175 0000016E B9[2A000000]            	mov       ecx,      buffer
   176 00000173 B800000000              	mov       eax,      0
   177 00000178 BF00000000              	mov       rdi,      0
   178 0000017D 48BE-                   	mov       rsi,      buffer
   178 0000017F [2A00000000000000] 
   179 00000187 0F05                    	syscall
   180 00000189 FEC8                    	dec       al
   181 0000018B 8805(36000000)          	mov       byte      [len_cur], al
   182 00000191 C3                      ret
   183                                  
   184                                  
   185                                  
   186                                  @to_str:
   187 00000192 C605(37000000)00        	mov byte [sign], 0
   188 00000199 8B05(04000000)          	mov eax, dword [res]
   189 0000019F B900000000              	mov ecx, 0
   190 000001A4 85C0                    	test eax, eax
   191 000001A6 BB0A000000              	mov ebx, 10
   192 000001AB 7909                    	jns str_no_sign
   193 000001AD C605(37000000)01        	mov byte [sign], 1
   194 000001B4 F7D8                    	neg eax
   195                                  str_no_sign:
   196 000001B6 31D2                    	xor edx, edx
   197 000001B8 F7F3                    	div ebx
   198 000001BA 6683C230                	add dx, '0'
   199 000001BE 6652                    	push dx
   200 000001C0 FFC1                    	inc ecx
   201 000001C2 85C0                    	test eax, eax
   202 000001C4 75F0                    	jnz str_no_sign
   203                                  if_sign_str:
   204 000001C6 8A15(37000000)          	mov dl, byte [sign]
   205 000001CC 84D2                    	test dl, dl
   206 000001CE 740A                    	jz str
   207 000001D0 67C680[2A000000]2D      	mov byte [buffer+eax], '-'
   208 000001D8 FFC0                    	inc eax
   209                                  str:
   210 000001DA 665A                    	pop dx
   211 000001DC 678890[2A000000]        	mov byte [buffer+eax], dl
   212 000001E3 FFC0                    	inc eax
   213 000001E5 E2F3                    	loop str
   214 000001E7 67C680[2A000000]0A      	mov byte [buffer+eax], 0x0a
   215 000001EF FFC0                    	inc eax
   216 000001F1 8805(36000000)          	mov byte [len_cur], al
   217 000001F7 C3                      ret
   218                                  
   219                                  
   220                                  
   221                                  @to_int:
   222 000001F8 4831C0                  	xor       rax,      rax     ;  \\\///
   223 000001FB 4831DB                  	xor       rbx,      rbx     ;   \\//
   224 000001FE 4831C9                  	xor       rcx,      rcx     ;    \/
   225 00000201 4831D2                  	xor       rdx,      rdx     ; cleaning
   226                                  
   227 00000204 BA[2A000000]            	mov       edx,      buffer
   228 00000209 670FB60A                	movzx     ecx,    byte [edx] ; 
   229 0000020D 83F92D                  	cmp       ecx,      '-'      ; is it minus?
   230 00000210 741D                    	je        @temp_sign
   231 00000212 7500                    	jne       @unsign
   232                                  
   233                                  @unsign:
   234 00000214 670FB60A                	movzx     ecx,    byte [edx]
   235 00000218 FFC2                    	inc       edx
   236 0000021A 83F930                  	cmp       ecx,      '0'     ; valid?
   237 0000021D 720F                    	jb        @unsign_done
   238 0000021F 83F939                  	cmp       ecx,      '9'
   239 00000222 770A                    	ja        @unsign_done
   240 00000224 83E930                  	sub       ecx,      '0'     ; "convert" character to number
   241 00000227 6BC00A                  	imul      eax,      10      ; multiply "result so far" by ten
   242 0000022A 01C8                    	add       eax,      ecx     ; add in current digit
   243 0000022C EBE6                    	jmp       @unsign           ; until done
   244                                  @unsign_done:
   245 0000022E C3                      ret
   246                                  
   247                                  @temp_sign:
   248 0000022F FFC2                    	inc       edx
   249                                  @sign:
   250 00000231 670FB60A                	movzx     ecx,    byte [edx]
   251 00000235 FFC2                    	inc       edx
   252 00000237 83F930                  	cmp       ecx,      '0'     ; valid?
   253 0000023A 720F                    	jb        @sign_done
   254 0000023C 83F939                  	cmp       ecx,      '9'
   255 0000023F 770A                    	ja        @sign_done
   256 00000241 83E930                  	sub       ecx,      '0'     ; "convert" character to number
   257 00000244 6BC00A                  	imul      eax,      10      ; multiply "result so far" by ten
   258 00000247 01C8                    	add       eax,      ecx     ; add in current digit
   259 00000249 EBE6                    	jmp       @sign             ; until done
   260                                  @sign_done:
   261 0000024B F7D8                    	neg       eax
   262 0000024D C3                      ret
   263                                  
   264                                  @error:
   265 0000024E BA06000000              	mov       edx,      len_err
   266 00000253 B9[38000000]            	mov       ecx,      msg_err
   267 00000258 E8FFFEFFFF              	call      write
   268 0000025D BB00000000              	mov ebx, 0
   269 00000262 B83C000000              	mov rax, 60
   270 00000267 0F05                    	syscall
