     1                                  section .rodata
     2 00000000 2523640A00                  format db "%#d", 10, 0   ; C 0-terminated string: "%#x\n" 
     3                                  
     4                                  section .data
     5                                  	default rel
     6                                  	extern printf, exit
     7                                  	extern a, b, res
     8                                  
     9 00000000 496E7075742076616C-     	msg_1     db        'Input values:', 0xa, 0
     9 00000009 7565733A0A00       
    10                                  	len_1     equ       $ - msg_1
    11                                  
    12 0000000F 61203D2000              	msg_a     db        'a = ', 0
    13                                  	len_a     equ       $ - msg_a
    14                                  
    15 00000014 62203D2000              	msg_b     db        'b = ', 0
    16                                  	len_b     equ       $ - msg_b
    17                                  
    18 00000019 726573756C74203D20-     	msg_res   db        'result = ', 0
    18 00000022 00                 
    19                                  	len_res   equ       $ - msg_res
    20                                  
    21 00000023 07                      	len_inp   db        7
    22 00000024 00<rep Ch>              	buffer times 12 db 0
    23                                  
    24 00000030 4572726F7200            	msg_err   db        'Error', 0
    25                                  	len_err   equ       $ - msg_err
    26                                  
    27                                  
    28                                  section .text
    29                                  	global asm_input
    30                                  	global int_asm_func
    31                                  
    32                                  
    33                                  ;    |___INPUT___|  
    34                                  ;    ||         ||
    35                                  ;    ||         ||
    36                                  ;   \  /       \  /
    37                                  ;    \/         \/
    38                                  asm_input:
    39 00000000 31C0                    	xor       eax,      eax     ;    \/
    40 00000002 31DB                    	xor       ebx,      ebx     ;    \/
    41 00000004 31C9                    	xor       ecx,      ecx     ;    \/
    42 00000006 31D2                    	xor       edx,      edx     ; cleaning
    43                                  
    44                                  	; "Input values"
    45 00000008 BA0F000000              	mov       edx,      len_1   ;
    46 0000000D B9[00000000]            	mov       ecx,      msg_1   ;
    47 00000012 E803010000              	call      write
    48                                  
    49                                  	; a = _
    50 00000017 BA05000000              	mov       edx,      len_a
    51 0000001C B9[0F000000]            	mov       ecx,      msg_a
    52 00000021 E8F4000000              	call      write
    53                                  
    54                                  	; reading a
    55 00000026 BA[23000000]            	mov       edx,      len_inp
    56 0000002B B9[24000000]            	mov       ecx,      buffer
    57 00000030 E8F2000000              	call      read
    58 00000035 E8FA000000              	call      to_int
    59 0000003A BA00000100              	mov       edx,      65536
    60 0000003F 39D0                    	cmp       eax,      edx
    61 00000041 0F831A010000            	jae       @error
    62 00000047 8905(00000000)          	mov       [a],      eax
    63                                  
    64                                  	; b = _
    65 0000004D BA05000000              	mov       edx,      len_b
    66 00000052 B9[14000000]            	mov       ecx,      msg_b
    67 00000057 E8BE000000              	call      write
    68                                  
    69                                  	; reading b
    70 0000005C BA[23000000]            	mov       edx,      len_inp
    71 00000061 B9[24000000]            	mov       ecx,      buffer
    72 00000066 E8BC000000              	call      read
    73 0000006B E8C4000000              	call      to_int
    74 00000070 BA00000100              	mov       edx,      65536
    75 00000075 39D0                    	cmp       eax,      edx
    76 00000077 0F83E4000000            	jae       @error
    77 0000007D BA00000000              	mov       edx,      0
    78 00000082 39D0                    	cmp       eax,      edx
    79 00000084 0F83D7000000            	jae       @error
    80 0000008A 8905(00000000)          	mov       [b],      eax
    81                                  
    82                                  ; calculations
    83                                  uint_asm_func:
    84 00000090 31C0                    	xor    eax,    eax 
    85 00000092 31DB                    	xor    ebx,    ebx 
    86 00000094 31C9                    	xor    ecx,    ecx 
    87 00000096 31D2                    	xor    edx,    edx 
    88                                  
    89 00000098 668B05(00000000)        	mov    ax,     [a]   ; ax = wa
    90 0000009F 668B1D(00000000)        	mov    bx,     [b]   ; bx = wb
    91 000000A6 6639D8                  	cmp    ax,     bx     ; ax==bx?
    92 000000A9 7404                    	je     @a_is_b
    93 000000AB 720F                    	jb     @a_lower_than_b
    94 000000AD 771C                    	ja     @a_higher_than_b
    95                                  
    96                                  	@a_is_b:
    97 000000AF B80B000000              	mov    eax,    11     ; eax = 11
    98 000000B4 8905(00000000)          	mov    [res], eax    ; wres = 11
    99 000000BA EB30                    	jmp    @res          ;
   100                                  
   101                                  	@a_lower_than_b:
   102 000000BC 66F7E0                  	mul    ax             ; ax:dx = ax * ax
   103 000000BF 66F7F3                  	div    bx             ; 
   104 000000C2 668905(00000000)        	mov    [res], ax     ;
   105 000000C9 EB21                    	jmp    @res          ;
   106                                  
   107                                  	@a_higher_than_b:
   108 000000CB 31C0                    	xor    eax,   eax
   109 000000CD 31DB                    	xor    ebx,   ebx
   110 000000CF 668B05(00000000)        	mov    ax,    [a]   ; eax = a
   111 000000D6 668B1D(00000000)        	mov    bx,    [b]   ; ebx = b
   112 000000DD F7E3                    	mul    ebx           ; eax:edx = a*b
   113 000000DF B90B000000              	mov    ecx,    11    ; ecx = 11
   114 000000E4 F7F1                    	div    ecx           ; eax:edx / eax
   115 000000E6 8905(00000000)          	mov    [res], eax   ; wres = eax
   116                                  
   117                                  
   118                                  @res:
   119                                  	; result = _
   120 000000EC BA0A000000              	mov       edx,      len_res
   121 000000F1 B9[19000000]            	mov       ecx,      msg_res
   122 000000F6 E81F000000              	call      write
   123                                  
   124                                  
   125 000000FB 4883EC08                    sub   rsp, 8             ; re-align the stack to 16 before calling another function
   126                                      ; Call printf.
   127 000000FF 8B35(00000000)              mov   esi, [res]    ; "%x" takes a 32-bit unsigned int
   128 00000105 488D3D(00000000)            lea   rdi, [rel format]
   129 0000010C 31C0                        xor   eax, eax           ; AL=0  no FP args in XMM regs
   130 0000010E E8(00000000)                call  printf
   131                                      ; Return from main.
   132 00000113 31C0                        xor   eax, eax
   133 00000115 4883C408                    add   rsp, 8
   134                                  
   135 00000119 C3                      ret
   136                                  
   137                                  
   138                                  ;    |_FUNCTIONS_|  
   139                                  ;    ||         ||
   140                                  ;    ||         ||
   141                                  ;   \  /       \  /
   142                                  ;    \/         \/
   143                                  write:
   144 0000011A BB01000000              	mov       ebx,      1
   145 0000011F B804000000              	mov       eax,      4
   146 00000124 CD80                    	int 80h
   147 00000126 C3                      ret
   148                                  
   149                                  read:
   150 00000127 BB01000000              	mov       ebx,      1
   151 0000012C B803000000              	mov       eax,      3
   152 00000131 CD80                    	int 80h
   153 00000133 C3                      ret
   154                                  
   155                                  to_int:
   156 00000134 31C0                    	xor       eax,      eax     ;    \/
   157 00000136 31DB                    	xor       ebx,      ebx     ;    \/
   158 00000138 31C9                    	xor       ecx,      ecx     ;    \/
   159 0000013A 31D2                    	xor       edx,      edx     ; cleaning
   160 0000013C BA[24000000]            	mov       edx,      buffer  ; our string
   161                                  .top:
   162 00000141 670FB60A                	movzx     ecx,   byte [edx] ; get a character
   163 00000145 83F92D                  	cmp       ecx,      '-'
   164 00000148 7417                    	je        @error
   165 0000014A FFC2                    	inc       edx               ; ready for next one
   166 0000014C 83F930                  	cmp       ecx,      '0'     ; valid?
   167 0000014F 720F                    	jb        .done
   168 00000151 83F939                  	cmp       ecx,      '9'
   169 00000154 770A                    	ja        .done
   170 00000156 83E930                  	sub       ecx,      '0'     ; "convert" character to number
   171 00000159 6BC00A                  	imul      eax,      10      ; multiply "result so far" by ten
   172 0000015C 01C8                    	add       eax,      ecx     ; add in current digit
   173 0000015E EBE1                    	jmp       .top              ; until done
   174                                  .done:
   175 00000160 C3                      ret
   176                                  
   177                                  @error:
   178 00000161 BA06000000              	mov       edx,      len_err
   179 00000166 B9[30000000]            	mov       ecx,      msg_err
   180 0000016B E8AAFFFFFF              	call      write
   181                                  
   182 00000170 CD80                    int 128
