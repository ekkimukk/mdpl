     1                                  section .rodata
     2 00000000 2523640A00                  format db "%#d", 10, 0   ; C 0-terminated string: "%#x\n" 
     3                                  
     4                                  section .data
     5                                  	default rel
     6                                  	extern printf, exit
     7                                  	extern a, b, res
     8                                  
     9 00000000 496E7075742076616C-     	msg_1     db        'Input values:', 0xa, 0
     9 00000009 7565733A0A00       
    10                                  	len_1     equ       $ - msg_1
    11                                  
    12 0000000F 61203D2000              	msg_a     db        'a = ', 0
    13                                  	len_a     equ       $ - msg_a
    14                                  
    15 00000014 62203D2000              	msg_b     db        'b = ', 0
    16                                  	len_b     equ       $ - msg_b
    17                                  
    18 00000019 726573756C74203D20-     	msg_res   db        'result = ', 0
    18 00000022 00                 
    19                                  	len_res   equ       $ - msg_res
    20                                  
    21 00000023 07                      	len_inp   db        7
    22 00000024 00<rep Ch>              	buffer times 12 db 0
    23                                  
    24                                  
    25                                  section .text
    26                                  	global asm_input
    27                                  	global int_asm_func
    28                                  
    29                                  
    30                                  ;    |___INPUT___|  
    31                                  ;    ||         ||
    32                                  ;    ||         ||
    33                                  ;   \  /       \  /
    34                                  ;    \/         \/
    35                                  asm_input:
    36 00000000 31C0                    	xor       eax,      eax     ;    \/
    37 00000002 31DB                    	xor       ebx,      ebx     ;    \/
    38 00000004 31C9                    	xor       ecx,      ecx     ;    \/
    39 00000006 31D2                    	xor       edx,      edx     ; cleaning
    40                                  
    41                                  	; "Input values"
    42 00000008 BA0F000000              	mov       edx,      len_1   ;
    43 0000000D B9[00000000]            	mov       ecx,      msg_1   ;
    44 00000012 E8DC000000              	call      write
    45                                  
    46                                  	; a = _
    47 00000017 BA05000000              	mov       edx,      len_a
    48 0000001C B9[0F000000]            	mov       ecx,      msg_a
    49 00000021 E8CD000000              	call      write
    50                                  
    51                                  	; reading a
    52 00000026 BA[23000000]            	mov       edx,      len_inp
    53 0000002B B9[24000000]            	mov       ecx,      buffer
    54 00000030 E8CB000000              	call      read
    55 00000035 E8D3000000              	call      to_int
    56 0000003A 8905(00000000)          	mov       [a],      eax
    57                                  
    58                                  	; b = _
    59 00000040 BA05000000              	mov       edx,      len_b
    60 00000045 B9[14000000]            	mov       ecx,      msg_b
    61 0000004A E8A4000000              	call      write
    62                                  
    63                                  	; reading b
    64 0000004F BA[23000000]            	mov       edx,      len_inp
    65 00000054 B9[24000000]            	mov       ecx,      buffer
    66 00000059 E8A2000000              	call      read
    67 0000005E E8AA000000              	call      to_int
    68 00000063 8905(00000000)          	mov       [b],      eax
    69                                  
    70                                  ; calculations
    71                                  uint_asm_func:
    72 00000069 31C0                    	xor    eax,    eax 
    73 0000006B 31DB                    	xor    ebx,    ebx 
    74 0000006D 31C9                    	xor    ecx,    ecx 
    75 0000006F 31D2                    	xor    edx,    edx 
    76                                  
    77 00000071 668B05(00000000)        	mov    ax,     [a]   ; ax = wa
    78 00000078 668B1D(00000000)        	mov    bx,     [b]   ; bx = wb
    79 0000007F 6639D8                  	cmp    ax,     bx     ; ax==bx?
    80 00000082 7404                    	je     @a_is_b
    81 00000084 720F                    	jb     @a_lower_than_b
    82 00000086 771C                    	ja     @a_higher_than_b
    83                                  
    84                                  	@a_is_b:
    85 00000088 B80B000000              	mov    eax,    11     ; eax = 11
    86 0000008D 8905(00000000)          	mov    [res], eax    ; wres = 11
    87 00000093 EB30                    	jmp    @res          ;
    88                                  
    89                                  	@a_lower_than_b:
    90 00000095 66F7E0                  	mul    ax             ; ax:dx = ax * ax
    91 00000098 66F7F3                  	div    bx             ; 
    92 0000009B 668905(00000000)        	mov    [res], ax     ;
    93 000000A2 EB21                    	jmp    @res          ;
    94                                  
    95                                  	@a_higher_than_b:
    96 000000A4 31C0                    	xor    eax,   eax
    97 000000A6 31DB                    	xor    ebx,   ebx
    98 000000A8 668B05(00000000)        	mov    ax,    [a]   ; eax = a
    99 000000AF 668B1D(00000000)        	mov    bx,    [b]   ; ebx = b
   100 000000B6 F7E3                    	mul    ebx           ; eax:edx = a*b
   101 000000B8 B90B000000              	mov    ecx,    11    ; ecx = 11
   102 000000BD F7F1                    	div    ecx           ; eax:edx / eax
   103 000000BF 8905(00000000)          	mov    [res], eax   ; wres = eax
   104                                  
   105                                  
   106                                  @res:
   107                                  	; result = _
   108 000000C5 BA0A000000              	mov       edx,      len_res
   109 000000CA B9[19000000]            	mov       ecx,      msg_res
   110 000000CF E81F000000              	call      write
   111                                  
   112                                  
   113 000000D4 4883EC08                    sub   rsp, 8             ; re-align the stack to 16 before calling another function
   114                                      ; Call printf.
   115 000000D8 8B35(00000000)              mov   esi, [res]    ; "%x" takes a 32-bit unsigned int
   116 000000DE 488D3D(00000000)            lea   rdi, [rel format]
   117 000000E5 31C0                        xor   eax, eax           ; AL=0  no FP args in XMM regs
   118 000000E7 E8(00000000)                call  printf
   119                                      ; Return from main.
   120 000000EC 31C0                        xor   eax, eax
   121 000000EE 4883C408                    add   rsp, 8
   122                                  
   123 000000F2 C3                      ret
   124                                  
   125                                  
   126                                  ;    |_FUNCTIONS_|  
   127                                  ;    ||         ||
   128                                  ;    ||         ||
   129                                  ;   \  /       \  /
   130                                  ;    \/         \/
   131                                  write:
   132 000000F3 BB01000000              	mov       ebx,      1
   133 000000F8 B804000000              	mov       eax,      4
   134 000000FD CD80                    	int 80h
   135 000000FF C3                      ret
   136                                  
   137                                  read:
   138 00000100 BB01000000              	mov       ebx,      1
   139 00000105 B803000000              	mov       eax,      3
   140 0000010A CD80                    	int 80h
   141 0000010C C3                      ret
   142                                  
   143                                  to_int:
   144 0000010D 31C0                    	xor       eax,      eax     ;    \/
   145 0000010F 31DB                    	xor       ebx,      ebx     ;    \/
   146 00000111 31C9                    	xor       ecx,      ecx     ;    \/
   147 00000113 31D2                    	xor       edx,      edx     ; cleaning
   148 00000115 BA[24000000]            	mov       edx,      buffer  ; our string
   149                                  .top:
   150 0000011A 670FB60A                	movzx     ecx,   byte [edx] ; get a character
   151 0000011E FFC2                    	inc       edx               ; ready for next one
   152 00000120 83F930                  	cmp       ecx,      '0'     ; valid?
   153 00000123 720F                    	jb        .done
   154 00000125 83F939                  	cmp       ecx,      '9'
   155 00000128 770A                    	ja        .done
   156 0000012A 83E930                  	sub       ecx,      '0'     ; "convert" character to number
   157 0000012D 6BC00A                  	imul      eax,      10      ; multiply "result so far" by ten
   158 00000130 01C8                    	add       eax,      ecx     ; add in current digit
   159 00000132 EBE6                    	jmp       .top              ; until done
   160                                  .done:
   161 00000134 C3                      ret
   162                                  
   163                                  to_sign_int:
   164 00000135 C3                      ret
