     1                                  section .data
     2                                  	extern Num  , Den  , Res , var
     3                                  	extern sia  , sib  , sic
     4                                  	extern usia , usib , usic
     5                                  	extern sca  , scb  , scc
     6                                  	extern usca , uscb , uscc
     7                                  
     8                                  section .text
     9                                  	global asm_signed_int
    10                                  	global asm_unsigned_int
    11                                  	global asm_signed_char
    12                                  	global asm_unsigned_char 
    13                                  
    14                                  asm_signed_int:
    15                                  	; numerator
    16 00000000 668B1C25[00000000]      	mov    bx,      [sib]    ; bx = b
    17 00000008 66B83700                	mov    ax,      55	 ; ax = 55
    18 0000000C 6629D8                  	sub    ax,      bx       ; ax = 55 - b
    19 0000000F 668B1C25[00000000]      	mov    bx,      [sia]    ; bx = a
    20 00000017 6601D8                  	add    ax,      bx       ; ax = 55 - b + a
    21 0000001A 66890425[00000000]      	mov    [Num],   ax       ; Num = 55 - b + a
    22                                  
    23                                      	; denominator
    24 00000022 66B8A8FF                	mov    ax,      -88      ; ax = -88
    25 00000026 6699                    	cwd			 ; ax:dx = -88
    26 00000028 668B1C25[00000000]      	mov    bx,      [sic]    ; bx = c
    27 00000030 66F7FB                  	idiv   bx                ; ax = -88 / c
    28 00000033 66FFC0                  	inc    ax                ; ax = -88 / c + 1
    29 00000036 66890425[00000000]      	mov    [Den],   ax       ; Den = 55 / c + 1
    30                                  
    31                                  	; result
    32 0000003E 668B0425[00000000]      	mov    ax,      [Num]    ; ax = 55 - b + a
    33 00000046 6699                    	cwd			 ; ax:dx = 55 - b + a
    34 00000048 668B1C25[00000000]      	mov    bx,      [Den]    ; bx = -88 / c + 1
    35 00000050 66F7FB                  	idiv   bx		 ; ax = num / den
    36 00000053 66890425[00000000]      	mov    [Res],   ax       ; Res = ax = Num / Den
    37 0000005B C3                      ret
    38                                  
    39                                  asm_unsigned_int:
    40                                  
    41                                  	; cleaning
    42 0000005C 31C0                    	xor    eax,     eax
    43 0000005E 31DB                    	xor    ebx,     ebx
    44 00000060 31C9                    	xor    ecx,     ecx
    45 00000062 31D2                    	xor    edx,     edx
    46                                  
    47                                  	; numerator
    48 00000064 668B1C25[00000000]      	mov    bx,      [usib]   ; bx = b
    49 0000006C 66B83700                	mov    ax,      55	 ; ax = 55
    50 00000070 29D8                    	sub    eax,      ebx       ; ax = 55 - b
    51 00000072 668B1C25[00000000]      	mov    bx,      [usia]   ; bx = a
    52 0000007A 01D8                    	add    eax,     ebx      ; ax = 55 - b + a
    53 0000007C 890425[00000000]        	mov    [Num],   eax      ; Num = 55 - b + a
    54                                  
    55                                  	; denominator
    56 00000083 31C0                    	xor    eax,     eax
    57 00000085 66B8A8FF                	mov    ax,      -88      ; ax = -88
    58 00000089 6699                    	cwd                      ; ax:dx = -88
    59 0000008B 668B1C25[00000000]      	mov    bx,      [usic]   ; bx = c
    60 00000093 66F7FB                  	idiv   bx                ; ax = -88 / c
    61 00000096 66FFC0                  	inc    ax                ; ax = -88 / c + 1
    62 00000099 66890425[00000000]      	mov    [Den],   ax       ; Den = ax = -88 / c + 1   
    63                                  
    64                                  	; result
    65 000000A1 31C0                    	xor    eax,     eax
    66 000000A3 31DB                    	xor    ebx,     ebx
    67 000000A5 668B0425[00000000]      	mov    ax,      [Num]    ; ax = 55 - b + a
    68 000000AD 668B1425[02000000]      	mov    dx,      [Num+2]  
    69 000000B5 668B1C25[00000000]      	mov    bx,      [Den]    ; bx = -88 / c + 1
    70 000000BD 66F7FB                  	idiv   bx		 ; ax = num / den
    71 000000C0 66890425[00000000]      	mov    [Res],   ax      ; Res = ax = Num / Den
    72 000000C8 C3                      ret
    73                                  
    74                                  asm_signed_char:
    75                                  	
    76                                  	; cleaning
    77 000000C9 31C0                    	xor    eax,     eax
    78 000000CB 31DB                    	xor    ebx,     ebx
    79 000000CD 31C9                    	xor    ecx,     ecx
    80 000000CF 31D2                    	xor    edx,     edx
    81                                  
    82                                  	; numerator
    83 000000D1 8A0425[00000000]        	mov    al,   byte   [sca]    ; al = a
    84 000000D8 6698                    	cbw
    85 000000DA 6689C3                  	mov    bx,      ax       ; bx = a
    86 000000DD 66B83700                	mov    ax,      55       ; ax = 55
    87 000000E1 6601C3                  	add    bx,      ax       ; ax = 55 + a
    88 000000E4 8A0425[00000000]        	mov    al,   byte   [scb]    ; al = b
    89 000000EB 6698                    	cbw
    90 000000ED 6629C3                  	sub    bx,      ax       ; ax = 55 - b + a
    91 000000F0 66891C25[00000000]      	mov    [Num],   bx       ; Num = ax
    92                                  
    93                                  	; denominator
    94 000000F8 66B8A8FF                	mov    ax,      -88      ; ax = -88
    95 000000FC 8A1C25[00000000]        	mov    bl,      [scc]    ; bx = c
    96 00000103 F6FB                    	idiv   bl
    97 00000105 6698                    	cbw
    98 00000107 66FFC0                  	inc    ax                ; ax = -88 / c + 1
    99 0000010A 66890425[00000000]      	mov    [Den],   ax       ; Den = ax = -88 / c + 1   
   100                                  
   101                                  	; result
   102 00000112 668B0425[00000000]      	mov    ax,      [Num]    ; ax = 55 - b + a
   103 0000011A 6699                    	cwd			 ; ax:dx = 55 - b + a
   104 0000011C 668B1C25[00000000]      	mov    bx,      [Den]    ; bx = -88 / c + 1
   105 00000124 66F7FB                  	idiv   bx		 ; ax = num / den
   106 00000127 66890425[00000000]      	mov    [Res],   ax       ; Res = ax = Num / Den
   107 0000012F C3                      ret
   108                                  
