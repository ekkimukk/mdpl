     1                                  section .data
     2                                  	extern ia,   wa
     3                                  	extern ib,   wb
     4                                  	extern ires, wres
     5                                  	extern var
     6                                  section .text
     7                                  	global uint_asm_func
     8                                  	global int_asm_func
     9                                  
    10                                  
    11                                  uint_asm_func:
    12 00000000 31C0                    	xor    eax,    eax 
    13 00000002 31DB                    	xor    ebx,    ebx 
    14 00000004 31C9                    	xor    ecx,    ecx 
    15 00000006 31D2                    	xor    edx,    edx 
    16                                  
    17 00000008 668B0425[00000000]      	mov    ax,     [wa]   ; ax = wa
    18 00000010 668B1C25[00000000]      	mov    bx,     [wb]   ; bx = wb
    19 00000018 6639D8                  	cmp    ax,     bx     ; ax==bx?
    20 0000001B 7404                    	je     @a_is_b
    21 0000001D 720F                    	jb     @a_lower_than_b
    22 0000001F 771C                    	ja     @a_higher_than_b
    23                                  
    24                                  	@a_is_b:
    25 00000021 B80B000000              	mov    eax,    11     ; eax = 11
    26 00000026 890425[00000000]        	mov    [wres], eax    ; wres = 11
    27 0000002D C3                      	ret
    28                                  
    29                                  	@a_lower_than_b:
    30 0000002E 66F7E0                  	mul    ax             ; ax:dx = ax * ax
    31 00000031 66F7F3                  	div    bx             ; 
    32 00000034 66890425[00000000]      	mov    [wres], ax     ;
    33 0000003C C3                      	ret
    34                                  
    35                                  	@a_higher_than_b:
    36 0000003D 31C0                    	xor    eax,   eax
    37 0000003F 31DB                    	xor    ebx,   ebx
    38 00000041 668B0425[00000000]      	mov    ax,    [wa]   ; eax = a
    39 00000049 668B1C25[00000000]      	mov    bx,    [wb]   ; ebx = b
    40 00000051 F7E3                    	mul    ebx           ; eax:edx = a*b
    41                                  
    42 00000053 B90B000000              	mov    ecx,    11    ; ecx = 11
    43 00000058 F7F1                    	div    ecx           ; eax:edx / eax
    44                                  
    45 0000005A 890425[00000000]        	mov    [wres], eax   ; wres = eax
    46 00000061 C3                      	ret
    47                                  
    48                                  
    49                                  int_asm_func:
    50 00000062 31C0                    	xor    eax,    eax 
    51 00000064 31DB                    	xor    ebx,    ebx 
    52 00000066 31C9                    	xor    ecx,    ecx 
    53 00000068 31D2                    	xor    edx,    edx 
    54                                  
    55 0000006A 8B0425[00000000]        	mov    eax,     [ia]   ; ax = wa
    56 00000071 8B1C25[00000000]        	mov    ebx,     [ib]   ; bx = wb
    57 00000078 39D8                    	cmp    eax,     ebx     ; ax==bx?
    58 0000007A 7404                    	je     @a_is_b_int
    59 0000007C 7C0F                    	jl     @a_lower_than_b_int
    60 0000007E 7F19                    	jg     @a_higher_than_b_int
    61                                  
    62                                  	@a_is_b_int:
    63 00000080 B80B000000              	mov    eax,    11     ; eax = 11
    64 00000085 890425[00000000]        	mov    [ires], eax    ; wres = 11
    65 0000008C C3                      	ret
    66                                  
    67                                  	@a_lower_than_b_int:
    68 0000008D F7E8                    	imul   eax             ; ax:dx = ax * ax
    69 0000008F F7FB                    	idiv   ebx             ; 
    70 00000091 890425[00000000]        	mov    [ires], eax     ;
    71 00000098 C3                      	ret
    72                                  
    73                                  	@a_higher_than_b_int:
    74 00000099 31C0                    	xor    eax,   eax
    75 0000009B 31DB                    	xor    ebx,   ebx
    76 0000009D 8B0425[00000000]        	mov    eax,    [ia]   ; eax = a
    77 000000A4 8B1C25[00000000]        	mov    ebx,    [ib]   ; ebx = b
    78 000000AB F7EB                    	imul   ebx           ; eax:edx = a*b
    79                                  
    80 000000AD B90B000000              	mov    ecx,    11    ; ecx = 11
    81 000000B2 F7F9                    	idiv   ecx           ; eax:edx / eax
    82                                  
    83 000000B4 890425[00000000]        	mov    [ires], eax   ; wres = eax
    84 000000BB C3                      	ret
